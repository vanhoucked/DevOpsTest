@page "/oogaandoening"
@using MudBlazor

@inject NavigationManager NavigationManager
@layout Layout.MainLayout

<MudContainer>
    <div id="timeline" class="container-fluid">
        <div class="d-flex">
            <div class="flex-grow-1 me-3 mb-4">
                <MudTextField @bind-Value="searchTerm" Label="Zoek op titel" FullWidth="true" @onchange="SearchTermChanged" />
            </div>
            <div class="d-flex">
                <div class="flex-grow-1 me-3 mb-4">
                    <MudAutocomplete @bind-Value="enteredSymptom" Label="Voer symptoom in" T="string" FullWidth="true" @onchange="AddSymptom" SearchFunc="GetAllSymptoms" />
                </div>
                <div class="d-flex align-items-center">
                    <MudFab Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" OnClick="AddSymptom" Size="Size.Small" />
                </div>
            </div>
        </div>
        <div class="mb-4">
            @foreach (var symptom in selectedSymptoms)
            {
                <MudChip Color="Color.Primary" Closable="true" OnClose="() => RemoveSymptom(symptom)">@symptom</MudChip>
            }
        </div>
        @for (var i = 0; i < FilterConditions().Count; i++)
        {
            var condition = FilterConditions()[i];
            <div class="condition-card row mb-4">
                @if (i % 2 == 0)
                {
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mudcar">
                                <MudCarousel ShowArrows="@arrows" ShowBullets="@bullets" EnableSwipeGesture="@enableSwipeGesture" AutoCycle="@autocycle" TData="object" Style="min-height: 250px; max-width: 450px">
                                    @foreach (var foto in condition.Fotos)
                                    {
                                        <MudCarouselItem Transition="transition" Color="@Color.Primary">
                                            <img src="@foto" class="rounded img-fluid fill-image" alt="@condition.Aandoening" />
                                        </MudCarouselItem>
                                    }
                                </MudCarousel>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="d-flex flex-column">
                                <div class="text-left">
                                    <h2>@condition.Aandoening</h2>
                                    <p>@condition.Beschrijving</p>
                                    <div class="col-md-6 mt-3 text-right">
                                        <MudButton Variant="MudBlazor.Variant.Text" Color="Color.Primary" Class="border" @onclick="() => NavigateToDetail(condition.Id)">Details</MudButton>
                                    </div>
                                    <div class="symptoms">
                                        @foreach (var symptom in selectedSymptoms)
                                        {
                                            @if (condition.Symptomen.Contains(symptom.ToLower()))
                                            {
                                                <span class="symptom-item">@symptom</span>
                                            }
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }
                @if (i % 2 != 0)
                {
                    <div class="row">
                        <div class="col-md-6">
                            <div class="d-flex flex-column">
                                <div class="text-left">
                                    <h2>@condition.Aandoening</h2>
                                    <p>@condition.Beschrijving</p>
                                    <div class="col-md-6 mt-3 text-right">
                                        <MudButton Variant="MudBlazor.Variant.Text" Color="Color.Primary" Class="border" @onclick="() => NavigateToDetail(condition.Id)">Details</MudButton>
                                    </div>
                                    <div class="symptoms">
                                        @foreach (var symptom in selectedSymptoms)
                                        {
                                            @if (condition.Symptomen.Contains(symptom.ToLower()))
                                            {
                                                <span class="symptom-item">@symptom</span>
                                            }
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mudcar">
                                <MudCarousel ShowArrows="@arrows" ShowBullets="@bullets" EnableSwipeGesture="@enableSwipeGesture" AutoCycle="@autocycle" TData="object" Style="min-height: 250px; max-width: 450px">
                                    @foreach (var foto in condition.Fotos)
                                    {
                                        <MudCarouselItem Transition="transition" Color="@Color.Primary">
                                            <img src="@foto" class="rounded img-fluid fill-image" alt="@condition.Aandoening" />
                                        </MudCarouselItem>
                                    }
                                </MudCarousel>
                            </div>
                        </div>
                    </div>
                }
            </div>
            @if (i != FilterConditions().Count - 1)
            {
                <hr class="featurette-divider" />
            }
        }
    </div>
</MudContainer>


@code {
    private string searchTerm = "";
        private string sortBy = "Aandoening";
        private string enteredSymptom = "";
        private List<string> selectedSymptoms = new List<string>();

        public class Condition
        {
            public int Id { get; set; }
            public List<string> Fotos { get; set; }
            public string Aandoening { get; set; }
            public string Behandeling { get; set; }
            public string Beschrijving { get; set; }
            public List<string> Symptomen { get; set; }
        }

        private List<Condition> conditions = new List<Condition>
{
    new Condition
    {
        Id = 1,
        Fotos = new List<string> {"https://picsum.photos/450/250?random=1","https://picsum.photos/450/250?random=2","https://picsum.photos/450/250?random=3"},
        Aandoening = "Staar",
        Beschrijving = "Een staar is een troebeling van de lens in het oog. Dit kan leiden tot wazig zien, vervormd zien en lichtschuwheid. Staar komt vaker voor bij ouderen, maar kan ook bij jongere mensen voorkomen.",
        Symptomen = new List<string>
{
            "wazig zien",
            "vervormd zien",
            "lichtschuwheid"
        },
        Behandeling = "De behandeling voor staar is chirurgische verwijdering van de troebele lens en vervanging ervan door een kunstlens."
    },
    new Condition
    {
        Id = 2,
        Fotos = new List<string> {"https://picsum.photos/450/250?random=1","https://picsum.photos/450/250?random=2","https://picsum.photos/450/250?random=3"},
        Aandoening = "Rode ogen",
        Beschrijving = "Rode ogen kunnen worden veroorzaakt door een verscheidenheid aan factoren, waaronder vermoeidheid, allergieën, infecties en oogirritatie. In de meeste gevallen zijn rode ogen onschadelijk en verdwijnen ze vanzelf.",
        Symptomen = new List<string>
{
            "rode ogen",
            "jeukende ogen",
            "branderig gevoel"
        },
        Behandeling = "De behandeling voor rode ogen hangt af van de oorzaak en kan variëren van oogdruppels tot rust en hydratatie."
    },
    new Condition
    {
        Id = 3,
        Fotos = new List<string> {"https://picsum.photos/450/250?random=1","https://picsum.photos/450/250?random=2","https://picsum.photos/450/250?random=3"},
        Aandoening = "Glaucoom",
        Beschrijving = "Glaucoom is een oogaandoening die het gezichtsvermogen kan beschadigen. Glaucoom wordt veroorzaakt door een verhoogde druk in het oog. Dit kan de zenuwen in het oog beschadigen, wat kan leiden tot blindheid.",
        Symptomen = new List<string>
{
            "verhoogde oogdruk",
            "gezichtsveldverlies",
            "hoofdpijn"
        },
        Behandeling = "De behandeling voor glaucoom omvat meestal oogdruppels, laserbehandelingen en in sommige gevallen chirurgie om de oogdruk te verlagen."
    },
    new Condition
    {
        Id = 4,
        Fotos = new List<string> {"https://picsum.photos/450/250?random=1","https://picsum.photos/450/250?random=2","https://picsum.photos/450/250?random=3"},
        Aandoening = "Retinoblastoma",
        Beschrijving = "Retinoblastoma is een zeldzame vorm van kanker die begint in de retina, het lichtgevoelige weefsel aan de achterkant van het oog. Retinoblastoma komt meestal voor bij kinderen jonger dan 5 jaar.",
        Symptomen = new List<string>
{
            "witachtige pupil",
            "oogpijn",
            "strabismus (scheelzien)"
        },
        Behandeling = "De behandeling voor retinoblastoma omvat meestal chirurgie, chemotherapie en/of bestraling, afhankelijk van de uitgebreidheid van de tumor."
    },
    new Condition
    {
        Id = 5,
        Fotos = new List<string> {"https://picsum.photos/450/250?random=1","https://picsum.photos/450/250?random=2","https://picsum.photos/450/250?random=3"},
        Aandoening = "Maculare degeneratie",
        Beschrijving = "Maculare degeneratie is een oogaandoering die het centrale deel van het netvlies, de macula, aantast. Dit kan leiden tot wazig zien, vervormd zien en moeite met lezen en autorijden.",
        Symptomen = new List<string>
{
            "wazig zien",
            "vervormd zien",
            "moeite met lezen"
        },
        Behandeling = "De behandeling voor maculare degeneratie omvat regelmatige controle door een oogarts, voedingssupplementen en in sommige gevallen injecties in het oog."
    }
};
        private bool arrows = true;
        private bool bullets = true;
        private bool enableSwipeGesture = true;
        private bool autocycle = true;
        private Transition transition = Transition.Slide;

        private List<Condition> FilterConditions()
        {
            var filtered = conditions.ToList();
            if (!string.IsNullOrEmpty(searchTerm))
            {
                filtered = filtered.Where(c => c.Aandoening.ToLower().Contains(searchTerm.ToLower())).ToList();
            }

            if (selectedSymptoms.Count > 0)
            {
                filtered = filtered.OrderByDescending(c => c.Symptomen.Count(s => selectedSymptoms.Contains(s, StringComparer.OrdinalIgnoreCase))).ToList();
            }

            return filtered;
        }

        private void SearchTermChanged(ChangeEventArgs args)
        {
            searchTerm = args.Value?.ToString();

        }

        private void AddSymptom()
        {
            if (!string.IsNullOrEmpty(enteredSymptom) && !selectedSymptoms.Contains(enteredSymptom, StringComparer.OrdinalIgnoreCase))
            {
                selectedSymptoms.Add(enteredSymptom.ToLower());
            }
            enteredSymptom = "";

            FilterConditions();
        }



        private void RemoveSymptom(string symptom)
        {
            selectedSymptoms.Remove(symptom);
            FilterConditions();

        }

        private void NavigateToDetail(int conditionId)
        {
            NavigationManager.NavigateTo($"/aandoeningDetails/{conditionId}");
        }

        private async Task<IEnumerable<string>> GetAllSymptoms(string searchText)
        {
            List<string> allSymptoms = new List<string>();

            foreach (var condition in conditions)
            {
                foreach (var symptom in condition.Symptomen)
                {
                    if (!allSymptoms.Contains(symptom, StringComparer.OrdinalIgnoreCase))
                    {
                        allSymptoms.Add(symptom.ToLower());
                    }
                }
            }
            if (!string.IsNullOrWhiteSpace(searchText))
            {
                allSymptoms = allSymptoms
                    .Where(symptom => symptom.Contains(searchText, StringComparison.OrdinalIgnoreCase))
                    .OrderBy(symptom => symptom)
                    .ToList();
            }
            else
            {
                allSymptoms = allSymptoms.OrderBy(symptom => symptom).ToList();
            }

            return allSymptoms;
        }

    }
